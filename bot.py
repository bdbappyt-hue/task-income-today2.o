import os
import telebot
from telebot import types
from flask import Flask, request
from sqlalchemy import create_engine, text

# ==============================
# CONFIG
# ==============================
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN not set in Environment Variables!")

ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # <-- ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® numeric ID
bot = telebot.TeleBot(TOKEN)

# ==============================
# DATABASE (SQLAlchemy)
# ==============================
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL not set in Environment Variables!")

engine = create_engine(DATABASE_URL, pool_pre_ping=True)

# ---- Create tables (if not exists)
with engine.begin() as conn:
    conn.execute(text("""
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        balance INTEGER DEFAULT 0,
        refer_by BIGINT,
        ref_count INTEGER DEFAULT 0,
        ref_earn INTEGER DEFAULT 0
    )
    """))

    conn.execute(text("""
    CREATE TABLE IF NOT EXISTS withdraws (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        method  TEXT,
        number  TEXT,
        amount  INTEGER,
        status  TEXT DEFAULT 'Pending'
    )
    """))

    conn.execute(text("""
    CREATE TABLE IF NOT EXISTS tasks (
        id SERIAL PRIMARY KEY,
        user_id  BIGINT,
        username TEXT,
        file_id  TEXT,
        status   TEXT DEFAULT 'Pending'
    )
    """))

    conn.execute(text("""
    CREATE TABLE IF NOT EXISTS settings (
        key TEXT PRIMARY KEY,
        value TEXT
    )
    """))

    # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü task_price (‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá)
    conn.execute(text("""
        INSERT INTO settings (key, value)
        VALUES ('task_price', '7')
        ON CONFLICT (key) DO NOTHING
    """))

# ==============================
# STATE
# ==============================
withdraw_steps = {}  # {user_id: {step, method, number}}
admin_steps = {}     # {admin_id: {action, step, target_id, old_balance}}

# ==============================
# SETTINGS HELPERS
# ==============================
def get_setting(key: str, default=None):
    with engine.begin() as conn:
        row = conn.execute(text("SELECT value FROM settings WHERE key=:k"), {"k": key}).fetchone()
        return row[0] if row else default

def set_setting(key: str, value: str):
    with engine.begin() as conn:
        conn.execute(text("""
            INSERT INTO settings (key, value)
            VALUES (:k, :v)
            ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
        """), {"k": key, "v": value})

# ==============================
# HELPERS
# ==============================
def send_main_menu(uid: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶≤‡¶æ‡¶á‡¶®
    kb.add(types.KeyboardButton("üí∞ Balance"), types.KeyboardButton("üë• Refer"))
    # ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶≤‡¶æ‡¶á‡¶®
    kb.add(types.KeyboardButton("üíµ Withdraw"))
    # ‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶≤‡¶æ‡¶á‡¶® (‡¶®‡¶§‡ßÅ‡¶®)
    kb.add(types.KeyboardButton("üéÅ Create Gmail"), types.KeyboardButton("üíå Support group üõë"))
    bot.send_message(uid, "üëã ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=kb)

def send_admin_menu(uid: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚ûï Add Balance"), types.KeyboardButton("‚úèÔ∏è Set Balance"))
    kb.add(types.KeyboardButton("‚ûñ Reduce Balance"), types.KeyboardButton("üìã All Requests"))
    kb.add(types.KeyboardButton("üë• User List"), types.KeyboardButton("üìÇ Task Requests"))
    kb.add(types.KeyboardButton("‚öôÔ∏è Set Task Price"))  # ‡¶®‡¶§‡ßÅ‡¶®
    kb.add(types.KeyboardButton("‚¨ÖÔ∏è Back"))
    bot.send_message(uid, "üîê Admin Panel:", reply_markup=kb)

def send_withdraw_card_to_admin(row):
    """row: (id, user_id, method, number, amount, status)"""
    req_id, u_id, method, number, amount, status = row
    text_msg = (f"üÜî {req_id} | üë§ {u_id}\n"
                f"üí≥ {method} ({number})\n"
                f"üíµ {amount}‡ß≥ | üìå {status}")
    if status == "Pending":
        ikb = types.InlineKeyboardMarkup()
        ikb.add(
            types.InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve_{req_id}"),
            types.InlineKeyboardButton("‚ùå Reject",  callback_data=f"reject_{req_id}")
        )
        bot.send_message(ADMIN_ID, text_msg, reply_markup=ikb)
    else:
        bot.send_message(ADMIN_ID, text_msg)

def apply_ref_bonus_if_increase(target_user_id: int, delta_increase: int):
    """
    ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠ ‡¶°‡ßá‡¶≤‡ßç‡¶ü‡¶æ‡ßü ‡¶¨‡¶æ‡ßú‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá
    ‡¶§‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞‡¶ï‡ßá ‡ß©% ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶¶‡¶æ‡¶ì‡•§
    """
    if delta_increase <= 0:
        return
    with engine.begin() as conn:
        row = conn.execute(text("SELECT refer_by FROM users WHERE user_id=:uid"), {"uid": target_user_id}).fetchone()
        if not row:
            return
        referrer = row[0]
        if not referrer:
            return
        bonus = int(delta_increase * 0.03)
        if bonus > 0:
            conn.execute(text("""
                UPDATE users
                SET balance = COALESCE(balance,0) + :b,
                    ref_earn = COALESCE(ref_earn,0) + :b
                WHERE user_id = :rid
            """), {"b": bonus, "rid": referrer})
    # ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ try ‡¶¨‡ßç‡¶≤‡¶ï‡ßá
    if delta_increase > 0:
        try:
            bot.send_message(referrer, f"üéâ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßç‡¶° {target_user_id} ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßá‡¶≤‡ßá‡¶® {bonus}‡ß≥ (3%)")
        except Exception:
            pass

# ==============================
# START + REFER ATTACH
# ==============================
@bot.message_handler(commands=['start'])
def cmd_start(message: types.Message):
    user_id = message.chat.id

    # ensure user exists
    with engine.begin() as conn:
        conn.execute(text("""
            INSERT INTO users (user_id)
            VALUES (:uid)
            ON CONFLICT (user_id) DO NOTHING
        """), {"uid": user_id})

    # refer attach: /start <referrer_id>
    parts = message.text.split()
    if len(parts) > 1:
        try:
            referrer_id = int(parts[1])
            if referrer_id != user_id:
                with engine.begin() as conn:
                    # ensure referrer row exists
                    conn.execute(text("""
                        INSERT INTO users (user_id)
                        VALUES (:rid)
                        ON CONFLICT (user_id) DO NOTHING
                    """), {"rid": referrer_id})

                    # only attach if current user's refer_by is NULL
                    ref = conn.execute(text("SELECT refer_by FROM users WHERE user_id=:uid"), {"uid": user_id}).fetchone()
                    if ref and ref[0] is None:
                        # attach refer_by
                        conn.execute(text("UPDATE users SET refer_by=:rid WHERE user_id=:uid"),
                                     {"rid": referrer_id, "uid": user_id})
                        # increment ref_count, ref_earn and give +1‡ß≥ bonus to referrer
                        conn.execute(text("""
                            UPDATE users
                            SET ref_count = COALESCE(ref_count,0) + 1,
                                ref_earn  = COALESCE(ref_earn,0) + 1,
                                balance   = COALESCE(balance,0) + 1
                            WHERE user_id=:rid
                        """), {"rid": referrer_id})
                try:
                    bot.send_message(referrer_id, f"üéâ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶ï‡¶ú‡¶® ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá!\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ 1‡ß≥ ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§")
                except Exception:
                    pass
        except Exception:
            pass

    send_main_menu(user_id)

# ==============================
# USER BUTTONS
# ==============================
@bot.message_handler(func=lambda m: m.text == "üí∞ Balance")
def on_balance(message: types.Message):
    uid = message.chat.id
    with engine.begin() as conn:
        row = conn.execute(text("SELECT balance FROM users WHERE user_id=:uid"), {"uid": uid}).fetchone()
    bal = row[0] if row else 0
    bot.send_message(uid, f"üí≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {bal}‡ß≥")

@bot.message_handler(func=lambda m: m.text == "üë• Refer")
def on_refer(message: types.Message):
    uid = message.chat.id
    link = f"https://t.me/{bot.get_me().username}?start={uid}"
    with engine.begin() as conn:
        row = conn.execute(text("SELECT COALESCE(ref_count,0), COALESCE(ref_earn,0) FROM users WHERE user_id=:uid"),
                           {"uid": uid}).fetchone()
    ref_count = row[0] if row else 0
    ref_earn = row[1] if row else 0
    bot.send_message(
        uid,
        f"üîó ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:\n{link}\n\n"
        f"üë• ‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá: {ref_count}\n"
        f"üí∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡ßü: {ref_earn}‡ß≥\n\n"
        f"‚úÖ ‡¶®‡¶ø‡ßü‡¶Æ: ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßç‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡¶ñ‡¶®‡¶á ‡¶¨‡¶æ‡ßú‡¶¨‡ßá,\n"
        f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡¶æ‡¶¨‡ßá‡¶® ‡¶∏‡ßá‡¶á ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø‡¶∞ 3%‡•§\n\n"
        f"üîî ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡ßá‡¶ï ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø 1‡ß≥ ‡¶™‡¶æ‡¶®‡•§"
    )

@bot.message_handler(func=lambda m: m.text == "üíµ Withdraw")
def on_withdraw(message: types.Message):
    uid = message.chat.id
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üì≤ Bkash"), types.KeyboardButton("üì≤ Nagad"))
    kb.add(types.KeyboardButton("‚¨ÖÔ∏è Back"))
    withdraw_steps[uid] = {"step": "method"}
    bot.send_message(uid, "üíµ ‡¶ï‡ßã‡¶® ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶®?", reply_markup=kb)

# --- Support group ---
@bot.message_handler(func=lambda m: m.text == "üíå Support group üõë")
def support_group(message: types.Message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:\n"
        "üëâ https://t.me/+f9tOe5fPe0Q0NGZl"
    )

# --- Create Gmail task ---
@bot.message_handler(func=lambda m: m.text == "üéÅ Create Gmail")
def create_gmail(message: types.Message):
    task_price_str = get_setting("task_price", "7")
    try:
        task_price = float(task_price_str)
    except Exception:
        task_price = 7
    bot.send_message(
        message.chat.id,
        f"üí∞‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ú‡¶ø‡¶Æ‡ßá‡¶á‡¶≤ ‡¶è ‡¶™‡¶æ‡¶¨‡ßá‡¶® : {task_price} ‡¶ü‡¶æ‡¶ï‡¶æüéÅ\n"
        "üìç [‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?](https://t.me/taskincometoday/16)",
        parse_mode="Markdown"
    )
    bot.send_message(message.chat.id, "üìÇ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ `.xlsx` ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# --- Receive .xlsx file ---
@bot.message_handler(content_types=['document'])
def handle_file(message: types.Message):
    doc = message.document
    uid = message.chat.id
    username = message.from_user.username or ""

    # .xlsx ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® (file name ‡¶¨‡¶æ mime type)
    is_xlsx = False
    if doc.file_name and doc.file_name.lower().endswith(".xlsx"):
        is_xlsx = True
    elif doc.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
        is_xlsx = True

    if not is_xlsx:
        bot.send_message(uid, "‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ `.xlsx` ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    # DB ‡¶§‡ßá ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡ßá‡¶≠
    with engine.begin() as conn:
        conn.execute(text("""
            INSERT INTO tasks (user_id, username, file_id, status)
            VALUES (:uid, :uname, :fid, 'Pending')
        """), {"uid": uid, "uname": username, "fid": doc.file_id})

    bot.send_message(uid, "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶õ‡¶ø‡•§")
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü
    try:
        bot.send_message(ADMIN_ID, f"üÜï ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶®\nüë§ User: {uid} (@{username})\nüìÑ File: {doc.file_name}")
    except Exception:
        pass

# ==============================
# ADMIN PANEL + ITEMS
# ==============================
@bot.message_handler(commands=['admin'])
def admin_panel(message: types.Message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§")
        return
    send_admin_menu(message.chat.id)

@bot.message_handler(func=lambda msg: msg.text == "üìã All Requests" and msg.chat.id == ADMIN_ID)
def all_requests_handler(message: types.Message):
    with engine.begin() as conn:
        rows = conn.execute(text("""
            SELECT id, user_id, method, number, amount, status
            FROM withdraws
            ORDER BY id DESC
            LIMIT 10
        """)).fetchall()
    if not rows:
        bot.send_message(ADMIN_ID, "üì≠ ‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    else:
        for row in rows:
            send_withdraw_card_to_admin(row)

@bot.message_handler(func=lambda msg: msg.text == "üë• User List" and msg.chat.id == ADMIN_ID)
def user_list_handler(message: types.Message):
    with engine.begin() as conn:
        total_users, total_balance = conn.execute(text("""
            SELECT COUNT(*), COALESCE(SUM(balance), 0) FROM users
        """)).fetchone()
        rows = conn.execute(text("""
            SELECT user_id, balance
            FROM users
            ORDER BY user_id DESC
            LIMIT 20
        """)).fetchall()

    text_msg = f"üë• ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {total_users}\nüí∞ ‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {total_balance}‡ß≥\n\n"
    if not rows:
        text_msg += "üì≠ ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡ßá‡¶á‡•§"
    else:
        text_msg += "üìå ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡ß®‡ß¶ ‡¶ú‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞:\n"
        for u in rows:
            text_msg += f"üÜî {u[0]} | üí∞ Balance: {u[1]}‡ß≥\n"
    bot.send_message(ADMIN_ID, text_msg)

# --- Task Requests (Admin) ---
@bot.message_handler(func=lambda msg: msg.text == "üìÇ Task Requests" and msg.chat.id == ADMIN_ID)
def task_requests_handler(message: types.Message):
    with engine.begin() as conn:
        rows = conn.execute(text("""
            SELECT t.id, t.user_id, t.username,
                   COALESCE(u.balance,0) AS bal
            FROM tasks t
            LEFT JOIN users u ON u.user_id = t.user_id
            WHERE t.status='Pending'
            ORDER BY t.id DESC
            LIMIT 15
        """)).fetchall()

    if not rows:
        bot.send_message(ADMIN_ID, "üì≠ ‡¶ï‡ßã‡¶®‡ßã Pending Task ‡¶®‡ßá‡¶á‡•§")
        return

    for tid, uid, uname, bal in rows:
        text_msg = (f"üóÇÔ∏è Task #{tid}\n"
                    f"üë§ User: {uid} @{uname if uname else '‚Äî'}\n"
                    f"üí∞ Balance: {bal}‡ß≥")
        ikb = types.InlineKeyboardMarkup()
        ikb.add(
            types.InlineKeyboardButton("üì• Open File", callback_data=f"topen_{tid}"),
            types.InlineKeyboardButton("‚úÖ Approve",  callback_data=f"tapprove_{tid}"),
            types.InlineKeyboardButton("‚ùå Reject",   callback_data=f"treject_{tid}")
        )
        bot.send_message(ADMIN_ID, text_msg, reply_markup=ikb)

# ==============================
# BACK BUTTON (GLOBAL)
# ==============================
@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è Back")
def on_back(message: types.Message):
    uid = message.chat.id
    withdraw_steps.pop(uid, None)
    admin_steps.pop(uid, None)
    if uid == ADMIN_ID:
        send_admin_menu(uid)
    else:
        send_main_menu(uid)

# ==============================
# WITHDRAW FLOW + ADMIN FLOW (catch-all)
# ==============================
@bot.message_handler(func=lambda m: True)
def catch_all(message: types.Message):
    uid = message.chat.id
    text_msg = message.text

    # ---------- Withdraw flow ----------
    if uid in withdraw_steps:
        step = withdraw_steps[uid]["step"]

        if step == "method":
            if text_msg in ["üì≤ Bkash", "üì≤ Nagad"]:
                withdraw_steps[uid]["method"] = text_msg
                withdraw_steps[uid]["step"] = "number"
                bot.send_message(uid, f"üì± ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {text_msg} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
            else:
                bot.send_message(uid, "‚ùå Bkash/Nagad ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‚¨ÖÔ∏è Back ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§")
            return

        if step == "number":
            withdraw_steps[uid]["number"] = text_msg
            withdraw_steps[uid]["step"] = "amount"
            bot.send_message(uid, "üíµ ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ Withdraw ‡¶ï‡¶∞‡¶¨‡ßá‡¶®? (‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® 50‡ß≥)")
            return

        if step == "amount":
            try:
                amount = int(text_msg)
            except Exception:
                bot.send_message(uid, "‚ùå ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡ßü ‡¶¶‡¶ø‡¶®‡•§")
                return

            with engine.begin() as conn:
                row = conn.execute(text("SELECT COALESCE(balance,0) FROM users WHERE user_id=:uid"),
                                   {"uid": uid}).fetchone()
                balance = row[0] if row else 0

                if amount < 50:
                    bot.send_message(uid, "‚ö†Ô∏è ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® withdraw 50‡ß≥")
                elif amount > balance:
                    bot.send_message(uid, f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡ßá‡¶á (‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®: {balance}‡ß≥)")
                else:
                    method = withdraw_steps[uid]["method"]
                    number = withdraw_steps[uid]["number"]

                    # Create request & deduct now
                    conn.execute(text("""
                        INSERT INTO withdraws (user_id, method, number, amount, status)
                        VALUES (:uid, :m, :n, :a, 'Pending')
                    """), {"uid": uid, "m": method, "n": number, "a": amount})

                    conn.execute(text("""
                        UPDATE users SET balance = COALESCE(balance,0) - :a WHERE user_id=:uid
                    """), {"a": amount, "uid": uid})

                    bot.send_message(uid, f"‚úÖ Withdraw Request ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá!\nüí≥ {method}\n‚òéÔ∏è {number}\nüíµ {amount}‡ß≥")
                    try:
                        bot.send_message(ADMIN_ID, f"üîî ‡¶®‡¶§‡ßÅ‡¶® Withdraw Request:\nüë§ {uid}\nüí≥ {method} ({number})\nüíµ {amount}‡ß≥")
                    except Exception:
                        pass

            withdraw_steps.pop(uid, None)
            return

    # ---------- Admin flow ----------
    if uid == ADMIN_ID:
        # Add
        if text_msg == "‚ûï Add Balance":
            admin_steps[uid] = {"action": "add", "step": "userid"}
            bot.send_message(uid, "üéØ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ID ‡¶¶‡¶ø‡¶®:")
            return

        if admin_steps.get(uid, {}).get("action") == "add":
            if admin_steps[uid]["step"] == "userid":
                try:
                    target = int(text_msg)
                    admin_steps[uid]["target_id"] = target
                    admin_steps[uid]["step"] = "amount"
                    bot.send_message(uid, "üíµ ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?")
                except Exception:
                    bot.send_message(uid, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID ‡¶¶‡¶ø‡¶®‡•§")
                return
            elif admin_steps[uid]["step"] == "amount":
                try:
                    amount = int(text_msg)
                    target = admin_steps[uid]["target_id"]
                    with engine.begin() as conn:
                        conn.execute(text("""
                            UPDATE users SET balance = COALESCE(balance,0) + :a WHERE user_id=:uid
                        """), {"a": amount, "uid": target})
                    apply_ref_bonus_if_increase(target, amount)
                    bot.send_message(uid, f"‚úÖ {target} ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá {amount}‡ß≥ ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                    try:
                        bot.send_message(target, f"üéâ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá {amount}‡ß≥ ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                    except Exception:
                        pass
                except Exception:
                    bot.send_message(uid, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§")
                admin_steps.pop(uid, None)
                return

        # Set
        if text_msg == "‚úèÔ∏è Set Balance":
            admin_steps[uid] = {"action": "set", "step": "userid"}
            bot.send_message(uid, "üéØ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ID ‡¶¶‡¶ø‡¶®:")
            return

        if admin_steps.get(uid, {}).get("action") == "set":
            if admin_steps[uid]["step"] == "userid":
                try:
                    target = int(text_msg)
                    admin_steps[uid]["target_id"] = target
                    with engine.begin() as conn:
                        row = conn.execute(text("SELECT COALESCE(balance,0) FROM users WHERE user_id=:uid"),
                                           {"uid": target}).fetchone()
                        old_balance = row[0] if row else 0
                    admin_steps[uid]["old_balance"] = old_balance
                    admin_steps[uid]["step"] = "amount"
                    bot.send_message(uid, f"üíµ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶§ ‡¶π‡¶¨‡ßá? (‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® {old_balance}‡ß≥)")
                except Exception:
                    bot.send_message(uid, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID ‡¶¶‡¶ø‡¶®‡•§")
                return
            elif admin_steps[uid]["step"] == "amount":
                try:
                    new_amount = int(text_msg)
                    target = admin_steps[uid]["target_id"]
                    old_balance = admin_steps[uid]["old_balance"]
                    with engine.begin() as conn:
                        conn.execute(text("UPDATE users SET balance=:b WHERE user_id=:uid"),
                                     {"b": new_amount, "uid": target})
                    delta = new_amount - old_balance
                    apply_ref_bonus_if_increase(target, delta)
                    bot.send_message(uid, f"‚úÖ {target} ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ {new_amount}‡ß≥ ‡¶è ‡¶∏‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                    try:
                        bot.send_message(target, f"‚ö†Ô∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá: {new_amount}‡ß≥")
                    except Exception:
                        pass
                except Exception:
                    bot.send_message(uid, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§")
                admin_steps.pop(uid, None)
                return

        # Reduce
        if text_msg == "‚ûñ Reduce Balance":
            admin_steps[uid] = {"action": "reduce", "step": "userid"}
            bot.send_message(uid, "üéØ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ID ‡¶¶‡¶ø‡¶®:")
            return

        if admin_steps.get(uid, {}).get("action") == "reduce":
            if admin_steps[uid]["step"] == "userid":
                try:
                    target = int(text_msg)
                    admin_steps[uid]["target_id"] = target
                    admin_steps[uid]["step"] = "amount"
                    bot.send_message(uid, "üíµ ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶¨‡ßá‡¶®?")
                except Exception:
                    bot.send_message(uid, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID ‡¶¶‡¶ø‡¶®‡•§")
                return
            elif admin_steps[uid]["step"] == "amount":
                try:
                    amount = int(text_msg)
                    target = admin_steps[uid]["target_id"]
                    with engine.begin() as conn:
                        conn.execute(text("""
                            UPDATE users SET balance = COALESCE(balance,0) - :a WHERE user_id=:uid
                        """), {"a": amount, "uid": target})
                    bot.send_message(uid, f"‚úÖ {target} ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá {amount}‡ß≥ ‡¶ï‡ßá‡¶ü‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                    try:
                        bot.send_message(target, f"‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá {amount}‡ß≥ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                    except Exception:
                        pass
                except Exception:
                    bot.send_message(uid, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§")
                admin_steps.pop(uid, None)
                return

        # --- NEW: Set Task Price via Admin Panel ---
        if text_msg == "‚öôÔ∏è Set Task Price":
            admin_steps[uid] = {"action": "set_task_price", "step": "ask"}
            current = get_setting("task_price", "7")
            bot.send_message(uid, f"üõ†Ô∏è ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏ {current}‡ß≥\n‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
            return

        if admin_steps.get(uid, {}).get("action") == "set_task_price":
            try:
                new_price = float(text_msg)
                if new_price < 0:
                    raise ValueError("negative")
                set_setting("task_price", str(new_price))
                bot.send_message(uid, f"‚úÖ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏ ‡¶è‡¶ñ‡¶® {new_price}‡ß≥ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            except Exception:
                bot.send_message(uid, "‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 7)")
            admin_steps.pop(uid, None)
            return

# ==============================
# WITHDRAW APPROVE / REJECT (INLINE)
# ==============================
@bot.callback_query_handler(func=lambda c: c.data.startswith("approve_") or c.data.startswith("reject_") or
                                      c.data.startswith("tapprove_") or c.data.startswith("treject_") or
                                      c.data.startswith("topen_"))
def on_inline_decision(call: types.CallbackQuery):
    # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á")
        return

    data = call.data

    # ---- Withdraw decisions ----
    if data.startswith("approve_") or data.startswith("reject_"):
        action, req_id_str = data.split("_", 1)
        try:
            req_id = int(req_id_str)
        except Exception:
            bot.answer_callback_query(call.id, "‡¶≠‡ßÅ‡¶≤ ID")
            return

        with engine.begin() as conn:
            row = conn.execute(text("""
                SELECT user_id, amount, status FROM withdraws WHERE id=:id
            """), {"id": req_id}).fetchone()

        if not row:
            bot.answer_callback_query(call.id, "‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø")
            return

        u_id, amount, status = row
        if status != "Pending":
            bot.answer_callback_query(call.id, "‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
            return

        if action == "approve":
            with engine.begin() as conn:
                conn.execute(text("UPDATE withdraws SET status='Approved' WHERE id=:id"), {"id": req_id})
            try:
                bot.send_message(u_id, f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Withdraw Request {amount}‡ß≥ Approved ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
            except Exception:
                pass
            try:
                bot.edit_message_text(f"üÜî {req_id} Withdraw Approved ‚úÖ",
                                      chat_id=call.message.chat.id, message_id=call.message.message_id)
            except Exception:
                pass
            bot.answer_callback_query(call.id, "Approved ‚úÖ")

        elif action == "reject":
            with engine.begin() as conn:
                conn.execute(text("UPDATE withdraws SET status='Rejected' WHERE id=:id"), {"id": req_id})
                conn.execute(text("""
                    UPDATE users SET balance = COALESCE(balance,0) + :a WHERE user_id=:uid
                """), {"a": amount, "uid": u_id})
            try:
                bot.send_message(u_id, f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Withdraw Request {amount}‡ß≥ Rejected ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            except Exception:
                pass
            try:
                bot.edit_message_text(f"üÜî {req_id} Withdraw Rejected ‚ùå",
                                      chat_id=call.message.chat.id, message_id=call.message.message_id)
            except Exception:
                pass
            bot.answer_callback_query(call.id, "Rejected ‚ùå")
        return

    # ---- Task requests (open / approve / reject) ----
    if data.startswith("topen_"):
        tid = int(data.split("_", 1)[1])
        with engine.begin() as conn:
            r = conn.execute(text("SELECT file_id FROM tasks WHERE id=:id"), {"id": tid}).fetchone()
        if not r:
            bot.answer_callback_query(call.id, "‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø")
            return
        file_id = r[0]
        try:
            bot.send_document(ADMIN_ID, file_id, caption=f"üóÇÔ∏è Task #{tid} file")
        except Exception:
            pass
        bot.answer_callback_query(call.id, "‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã")
        return

    if data.startswith("tapprove_") or data.startswith("treject_"):
        is_approve = data.startswith("tapprove_")
        tid = int(data.split("_", 1)[1])

        with engine.begin() as conn:
            row = conn.execute(text("SELECT user_id, status FROM tasks WHERE id=:id"), {"id": tid}).fetchone()

        if not row:
            bot.answer_callback_query(call.id, "‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø")
            return

        u_id, status = row
        if status != "Pending":
            bot.answer_callback_query(call.id, "‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
            return

        new_status = "Approved" if is_approve else "Rejected"
        with engine.begin() as conn:
            conn.execute(text("UPDATE tasks SET status=:st WHERE id=:id"), {"st": new_status, "id": tid})

        try:
            if is_approve:
                bot.send_message(u_id, "‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Gmail ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Report ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!")
            else:
                bot.send_message(u_id, "‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Gmail ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        except Exception:
            pass

        try:
            bot.edit_message_text(f"üóÇÔ∏è Task #{tid} ‚Üí {new_status}",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)
        except Exception:
            pass

        bot.answer_callback_query(call.id, f"{new_status} ‚úÖ" if is_approve else f"{new_status} ‚ùå")
        return

# ==============================
# RUN (Flask + Webhook)
# ==============================
app = Flask(__name__)

@app.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route('/')
def webhook():
    # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Render host ‡¶¨‡¶∏‡¶æ‡¶ì
    public_base = os.getenv("PUBLIC_BASE_URL", "https://YOUR-RENDER-HOST.onrender.com")
    # ‡¶™‡ßÅ‡¶∞‡¶®‡ßã webhook ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
    bot.remove_webhook()
    bot.set_webhook(url=f"{public_base}/{TOKEN}")
    return "Webhook set!", 200

if __name__ == "__main__":
    print("ü§ñ Bot is running...")
    # ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ü‡¶æ ‡¶ö‡¶≤‡¶¨‡ßá; Render ‡¶è gunicorn ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶Æ
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))


